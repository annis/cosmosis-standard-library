[runtime]
; Switch the sampler to multinest, a sophisticated 
; nested sampler which computes the Bayesian evidence
; for a model.  As a by-product you can generate posterior
; samples.
sampler = multinest

[multinest]
; The cut-off point, though sampling can end
; earlier if convergence on the evidence is
; reached
max_iterations=50000
; The number of active points in the multinest
; algorithm.
live_points=500
; Multinest can produce a large amount of additional
; output.  If you're an expert you can set a base
; file root to use for all those files here
multinest_outfile_root=

[output]
filename = output/demo9.txt
format = text
verbosity= debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency camb jla riess11
values = demos/values9.ini
quiet=T
debug=F
timing=F



[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = boltzmann/camb/camb_interface.py
mode=background
feedback=0
zmin_background = 1e-3
nz = 400
zmax_background = 1.3
do_bao = F

[jla]
; JLA needs quite a lot of parameters telling it where
; data files are ...
file = ./supernovae/jla_v3/jla.so
data_dir = ./supernovae/jla_v3/data
data_file = jla_lcparams.txt
scriptmcut = 10.0
mag_covmat_file = jla_v0_covmatrix.dat
stretch_covmat_file = jla_va_covmatrix.dat
colour_covmat_file = jla_vb_covmatrix.dat
mag_stretch_covmat_file = jla_v0a_covmatrix.dat
mag_colour_covmat_file = jla_v0b_covmatrix.dat
stretch_colour_covmat_file = jla_vab_covmatrix.dat

[riess11]
file = ./likelihood/riess11/riess11.py

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = ./utility/consistency/consistency_interface.py
