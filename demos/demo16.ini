[runtime]
sampler = minuit

[minuit]
verbose=T
; tolerance in log-like required, in milliSigmas.
; i.e. if tolerance=1.0 then the expected distance from the maximum (EDM) 
; in chi^2 will be 1e-3.
; This will try to get within a 0.05 sigma.
tolerance = 50.0

;save an ini file starting from the best-fit point
output_ini = output/demo16_maxlike_values.ini 

; Save the cosmology info in this directory
save_dir=output/demo16

; Minimization strategy
strategy = medium
; You can also try:
; strategy = fast  
; to try to converge as fast as possible 
; but with more chance of missing the best-fit
; strategy = safe
; to converge more slowly but with less 
; chance of missing the best-fit


; Minimization algorithm
algorithm = migrad
;you can also try:
; strategy = simplex   
; To use the simplex algorithm instead of 
; mingrad.  This is usually worse but can
; occasionaly help for problems with
; extremely badly behaved derivatives of 
; the likelihood

; alogithm = fallback
; To try mingrad but fall back to simplex
; if it fails.

; max number of function evaluations (per core) per run.
; leave this as zero to use the default, which is 200 + 100 * npar + 5 * npar**2
; This demo should take 200 iterations with the default settings.
; This limit is approximate - don't be surprised if it actually does a few more than this.
maxiter = 1000

; This is a very approximate estimate of parameter std. devs. 
; as a fraction of the parameter ranges. It helps speed convergence if 
; it is more accurate
width_estimate = 0.05

; save the covariance matrix here
save_cov = output/demo16-covmat.txt

[output]
filename = output/demo16.txt

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency camb pantheon riess21
values = demos/values16.ini
extra_output = 


[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = boltzmann/camb/camb_interface.py
mode = background
feedback = 0

; We need quite fine redshift spacing, because the supernovae
; go down to low z where things are pretty sensitive
nz_background = 200
zmin_background = 0.0
zmax_background = 2.0

[pantheon]
file = likelihood/pantheon/pantheon.py

; The Riess 11 likelihood anchors H0 for us
[riess21]
file = likelihood/riess21/riess21.py

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = utility/consistency/consistency_interface.py
